# SwageCSS Project Rules

## Core Principle
SwageCSS is a utility-first CSS framework. ALL styling must use pre-defined classes and variables from `src/foundation/`. No custom CSS rules or inline styles allowed.

---

## CSS Development Rules

### ‚úÖ MUST DO
- Only use CSS variables and classes from `src/foundation/`
- Reference existing components in `src/components/` as patterns
- Use utility classes for all layout and styling (e.g., `m-24`, `p-16`, `flex-row`)
- Follow BEM naming for new components (`.block__element--modifier`)
- Use approved spacing scale: 0, 1, 2, 4, 6, 8, 12, 16, 20, 24, 32, 40, 48, 64, 80, 160, 240, 320
- Use theme-aware colors via CSS variables (e.g., `--color-text-default`)

### ‚ùå NEVER DO
- Never write inline styles (`style=""` attributes)
- Never create custom CSS rules outside foundation
- Never use arbitrary values (e.g., `padding: 15px` instead of `p-16`)
- Never modify files in `src/foundation/` without explicit permission
- Never use `!important` (proper specificity should handle all cases)
- Never add vendor prefixes manually (handled by build tools if needed)

---

## File Organization

### Read-Only (Foundation)
```
src/foundation/
  ‚îú‚îÄ‚îÄ foundation.css   (main import file)
  ‚îú‚îÄ‚îÄ reset.css        (base reset)
  ‚îú‚îÄ‚îÄ colors.css       (color variables & utilities)
  ‚îú‚îÄ‚îÄ spacing.css      (margin/padding utilities)
  ‚îú‚îÄ‚îÄ typography.css   (font styles & text utilities)
  ‚îú‚îÄ‚îÄ display.css      (layout utilities)
  ‚îî‚îÄ‚îÄ icons.css        (icon definitions)
```

### Development Areas
```
src/components/      (Component HTML + CSS files)
components/          (Component documentation pages)
_includes/           (Eleventy templates)
src/modules/         (Additional features like drawer, theme toggle)
```

### Generated (‚ö†Ô∏è NEVER EDIT DIRECTLY)
```
docs/                (Eleventy build output - AUTO-GENERATED)
```

**CRITICAL WARNING:** The `docs/` directory is completely generated by Eleventy.
- ‚ùå NEVER edit files in `docs/` directly - all changes will be OVERWRITTEN
- ‚ùå NEVER create new files in `docs/` manually
- ‚úÖ Edit source files instead (components/, foundation/, _includes/, etc.)
- ‚úÖ Run `npx @11ty/eleventy` to regenerate docs/
- üìã Configured in `.eleventy.js` with output dir: "docs"

---

## Common Utility Patterns

### Spacing
```html
<!-- Margin: m-{size}, mt-, mr-, mb-, ml-, mx-, my- -->
<div class="m-24">All sides margin</div>
<div class="mt-16 mb-32">Top and bottom margin</div>
<div class="mx-auto">Centered with auto margins</div>

<!-- Padding: p-{size}, pt-, pr-, pb-, pl-, px-, py- -->
<div class="p-16">All sides padding</div>
<div class="px-24 py-16">Horizontal and vertical padding</div>
```

### Layout
```html
<!-- Flexbox -->
<div class="flex-row flex-justify-between flex-items-center">
  <span>Left</span>
  <span>Right</span>
</div>

<!-- Grid (if available) -->
<div class="grid grid-cols-3 gap-16">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
</div>
```

### Typography
```html
<!-- Size and weight -->
<h1 class="text-2xl font-bold">Heading</h1>
<p class="text-md font-normal">Body text</p>
<small class="text-sm font-semibold">Small text</small>
```

### Colors
```html
<!-- Use semantic color variables -->
<div class="text-primary bg-surface-default border-border-default">
  Content with theme-aware colors
</div>
```

---

## Component Development

### Component File Structure

Every new component requires these files:

```
src/components/{component-name}/
‚îú‚îÄ‚îÄ {component-name}.css         ‚Üê Component-specific CSS (REQUIRED)
‚îú‚îÄ‚îÄ index.html                   ‚Üê Demo/test page (recommended)

src/components/components.css    ‚Üê Import registry (UPDATE THIS)

components/
‚îî‚îÄ‚îÄ {component-name}.html        ‚Üê Documentation page (optional, Eleventy)
```

### Creating New Components - Step by Step

**1. Create Component Directory**
```bash
mkdir src/components/my-component
```

**2. Create Component CSS** - `src/components/my-component/my-component.css`
```css
/* Only use foundation variables - never arbitrary values */

/* Base component */
.my-component {
    display: flex;
    padding: var(--spacing-24);
    background-color: var(--color-surface-default);
    border-radius: var(--spacing-8);
}

/* Child elements (BEM) */
.my-component__header {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    margin-bottom: var(--spacing-12);
    color: var(--color-text-default);
}

.my-component__body {
    font-size: var(--font-size-md);
    line-height: var(--line-height-md);
}

/* Modifiers (BEM) */
.my-component--large {
    padding: var(--spacing-32);
}

.my-component--variant {
    background-color: var(--color-surface-highlight);
}

/* Theme overrides (if needed) */
html[data-theme="blv"] .my-component {
    border-radius: 4px;
    box-shadow: 0 2px 16px 0 rgba(102, 114, 125, 0.25);
}
```

**3. Register Component** - Add to `src/components/components.css`
```css
@import 'my-component/my-component.css';
```

**4. Create Demo Page** - `src/components/my-component/index.html`
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>My Component - Swage.CSS</title>
    <link rel="stylesheet" href="../../swage.css">
    <link rel="stylesheet" href="../../demo.css">
</head>
<body>
    <h1>My Component</h1>

    <!-- Basic example -->
    <div class="my-component">
        <div class="my-component__header">Component Header</div>
        <div class="my-component__body">Component content goes here</div>
    </div>

    <!-- Variant examples -->
    <div class="my-component my-component--large">
        <div class="my-component__header">Large Variant</div>
        <div class="my-component__body">This uses more padding</div>
    </div>

    <div class="my-component my-component--variant">
        <div class="my-component__header">Style Variant</div>
        <div class="my-component__body">Different background color</div>
    </div>
</body>
</html>
```

**5. Create Documentation (Optional)** - `components/my-component.html`
```html
---
layout: layout.html
title: My Component
heading: My Component
secondary: Component description
---

<section>
    <h2>Overview</h2>
    <p>Description of what this component does...</p>

    <!-- Examples -->
    <div class="my-component">
        <div class="my-component__header">Example</div>
    </div>
</section>
```

**6. Add Navigation Link** - Update `_includes/_nav.html`
- Add a link to your new component in the appropriate section
- For standard components: Add under `<h2>Components</h2>`
- For BLV components: Add under `<h2>BLV Components</h2>`
- Format: `<a href="{{ '/' | url }}components/my-component/">My Component</a>`
- For BLV: `<a href="{{ '/' | url }}components/blv/my-component/">My Component</a>`

### Component Naming Rules (BEM)

- **Block** (base): `.my-component`
- **Element** (child): `.my-component__header`, `.my-component__body`
- **Modifier** (variant): `.my-component--large`, `.my-component--primary`
- Use lowercase with hyphens
- Be descriptive but concise

### Component CSS Rules

‚úÖ **DO:**
- Use foundation CSS variables only
- Follow BEM naming strictly
- Add theme overrides if needed
- Keep specificity low

‚ùå **DON'T:**
- Use arbitrary values (15px, #abc123)
- Use `!important`
- Create nested selectors deeper than 2 levels
- Apply utility classes in CSS (use them in HTML)

---

## Theme System

SwageCSS supports multiple themes via `data-theme` attribute:

```html
<html data-theme="cui">  <!-- Default: Curative UI theme -->
<html data-theme="blv">  <!-- Alternate: BLV theme -->
```

Components automatically adapt to themes using CSS variables. Always use semantic variables (`--color-text-default`) instead of direct colors (`--color-blue-500`) for theme compatibility.

---

## Eleventy Context

### Build Commands
```bash
# Build the site
npx @11ty/eleventy

# Watch mode (if configured)
npx @11ty/eleventy --watch
```

### Template System
- **Engine**: Liquid (Eleventy default)
- **Layout**: `_includes/layout.html`
- **Config**: `.eleventy.js`
- **Output**: `docs/` directory
- **Path Prefix**: `/swagecss/`

### Template Variables
```liquid
{{ title }}          <!-- Page title -->
{{ heading }}        <!-- Page heading -->
{{ content }}        <!-- Main content -->
{{ '/' | url }}      <!-- Base URL with path prefix -->
```

---

## CSS Variables Quick Reference

### Spacing Scale
```
--spacing-0, --spacing-1, --spacing-2, --spacing-4, --spacing-6, --spacing-8
--spacing-12, --spacing-16, --spacing-20, --spacing-24, --spacing-32, --spacing-40
--spacing-48, --spacing-64, --spacing-80, --spacing-160, --spacing-240, --spacing-320
```

### Color Variables
```
Primary:  --color-primary-signal-orange, --color-primary-sky-blue
Neutral:  --color-neutral-black, --color-neutral-eggshell, --color-neutral-off-white
Semantic: --color-text-default, --color-surface-default, --color-border-default
Scales:   --color-{blue,green,red,yellow,gray}-{100-900}
```

### Typography
```
Sizes:   --font-size-{2xs,xs,sm,md,lg,xl,2xl,3xl,4xl,5xl}
Heights: --line-height-{2xs,xs,sm,md,lg,xl,2xl,3xl,4xl,5xl}
Weights: --font-weight-{normal,semibold,bold}
Family:  --font-family-sans (Figtree)
```

---

## AI Assistant Guidelines

When working with AI assistants (Claude, Cursor, etc.):

### Good Prompts
- "Create a button using SwageCSS foundation classes"
- "Add a card layout with only utility classes from src/foundation/"
- "Which spacing class should I use for 24px margin?"

### Bad Prompts
- "Add custom CSS for this component"
- "Style this with inline styles"
- "Create a new color variable"

### Before Accepting AI Suggestions
- ‚úì Check all classes exist in `src/foundation/`
- ‚úì Verify no inline styles are used
- ‚úì Confirm spacing uses approved scale
- ‚úì Ensure colors use CSS variables
- ‚úì Validate BEM naming for components

---

## Validation Checklist

Before committing code:

- [ ] All CSS classes exist in `src/foundation/`
- [ ] No inline styles (`style=""` attributes)
- [ ] No custom CSS rules created
- [ ] Only approved CSS variables used
- [ ] Spacing follows approved scale (not arbitrary values)
- [ ] Colors use semantic variables for theme support
- [ ] Components follow BEM naming convention
- [ ] HTML is semantic and accessible
- [ ] Build succeeds without errors

---

## Getting Help

1. **Check Foundation Files**: Look in `src/foundation/` for available classes
2. **Review Components**: See `src/components/` for examples
3. **Read agents.md**: Detailed CSS constraint documentation
4. **Check CLAUDE_GUIDE.md**: Quick reference guide

---

*Generated for SwageCSS v0.2*
